<?php
/**
 * 2018 Alma / Nabla SAS
 *
 * THE MIT LICENSE
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and
 * to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * @author    Alma / Nabla SAS <contact@getalma.eu>
 * @copyright 2018 Alma / Nabla SAS
 * @license   https://opensource.org/licenses/MIT The MIT License
 *
 */

// @codingStandardsIgnoreFile

?>
<?php
/**
 * @see \Alma\MonthlyPayments\Block\Catalog\Product\View
 */
/** @var $block \Alma\MonthlyPayments\Block\Catalog\Product\View */
/** @var $escaper \Magento\Framework\Escaper */
/** @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer */
/** @var \Magento\Csp\Api\InlineUtilInterface $csp */
?>
<?php
$config = $block->getConfig();

if ($config->showProductWidget() && $block->getJsonPlans()): ?>
    <div id="payment-plans"></div>
    <?php
    $scriptString = <<<script
require.config({
    paths: {
        'widgets/Alma': 'https://cdn.jsdelivr.net/npm/@alma/widgets@1.x/dist/alma-widgets.umd'
    }
});

require(['widgets/Alma','jquery','Magento_Catalog/js/price-utils'], function (Alma, $, priceUtils) {
    ;(function() {

        function initWidget(merchantId, apiMode, containerId, purchaseAmount, plans) {
            var widgets = Alma.Widgets.initialize(merchantId, apiMode);
            widgets.add(Alma.Widgets.PaymentPlans, {
                container: '#' + containerId,
                purchaseAmount: purchaseAmount,
                plans: plans
            });
            widgets.render();
        }

        function formatPrice(priceHtml)
        {
            var price = priceHtml.replace(/[^\d]/g,"");
            var qty = $('#qty').val();
            if(!qty.match(/^\d+$/) || !(qty > 0))
            {
                qty = 1;
            }
            return price * qty;
        }

        function getPriceFromContainer(priceContainer)
        {
            if(priceContainer !== undefined && priceContainer !== null)
            {
                var priceHtml = priceContainer.html();
                if(priceHtml !== undefined && priceHtml !== null)
                {
                    return formatPrice(priceHtml);
                }
            }
            return false;
        }

        function getPrice() {
            if({$config->useQuantityForWidgetPrice()}){
                var priceContainer = $('#product-price-{$block->getProductId()} .price');
                var price = getPriceFromContainer(priceContainer);
                if(price > 0){ return price; }

                priceContainer = $('#price-including-tax-product-price-{$block->getProductId()} .price');
                price = getPriceFromContainer(priceContainer);
                if(price > 0){ return price; }

                console.error('Price container not found, fallback to price without qty installments')
            }
            return '{$block->getPrice()}';
        }

        function updateWidget() {
            var price = getPrice();
            if(price !== false && price > 0){
                initWidget(
                    '{$config->getMerchantId()}',
                    Alma.ApiMode.{$block->getActiveMode()},
                    'payment-plans',
                    price,
                    {$block->getJsonPlans()}
                );
            }
        }

        if({$config->isCustomWidgetPosition()}){
            if($('{$config->getWidgetContainerSelector()}') != undefined){
                if({$config->prependWidgetInContainer()}){
                    $('{$config->getWidgetContainerSelector()}').prepend($('#payment-plans'));
                }else{
                    $('{$config->getWidgetContainerSelector()}').append($('#payment-plans'));
                }
            }else{
                console.error('Css container "{$config->getWidgetContainerSelector()}" not found');
            }
        }

        var callback = function(mutationsList) {
            for(var mutation of mutationsList) {
                if (mutation.type == 'childList')
                {
                    updateWidget();
                }
            }
        };

        var targetNode = document.getElementById('product-price-{$block->getProductId()}');
        if(targetNode === null || targetNode === undefined)
        {
            targetNode = document.getElementById('price-including-tax-product-price-{$block->getProductId()}');
        }else{
        }
        if(targetNode !== undefined && targetNode !== null)
        {
            var observer = new MutationObserver(callback);
            // https://developer.mozilla.org/fr/docs/Web/API/MutationObserver#MutationObserverInit
            observer.observe(targetNode, { childList: true });
            $('#qty').change(function() {
                updateWidget();
            });
        }else{
            updateWidget();
        }
    })()
});
script;

    if (isset($secureRenderer)) :
        echo $secureRenderer->renderTag('script', [], $scriptString, false);
    elseif (isset($csp)):
        echo $csp->renderTag('script', ['type' => 'text/javascript'], $scriptString);
    else:
        echo '<script>'.$scriptString.'</script>';
    endif;
endif; ?>
